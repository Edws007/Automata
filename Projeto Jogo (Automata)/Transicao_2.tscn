[gd_scene load_steps=6 format=2]

[ext_resource path="res://imagens/2.png" type="Texture" id=2]

[sub_resource type="Shader" id=2]
code = "	shader_type canvas_item;

	uniform float screen_width = 1920;
	uniform float screen_height = 1080;
	uniform vec2 center = vec2(0.5f);
	uniform vec2 player = vec2(0.5f);

	uniform float progress : hint_range(0,1);
	uniform float pixel_size = 15f;
	uniform float circle_size : hint_range(0,2) = 1.5f;
	uniform float curtains : hint_range(0,1) = 1f;

	uniform int type : hint_range(0,4) = 0;

	void fragment() {
		//Tipo Diamante Pixel
		if (type == 0) {
			float xFraction = fract(FRAGCOORD.x / pixel_size);
			float yFraction = fract(FRAGCOORD.y / pixel_size);
			
			float xDistance = abs(xFraction - 0.5);
			float yDistance = abs(yFraction - 0.5);

			if (xDistance + yDistance + UV.x + UV.y > progress * 4f) {
				discard;
			}
		}
		//Tipo Circulo no player
		else if (type == 1) {
			float ratio = screen_width / screen_height;
			if (distance(player, vec2(mix(player.x, UV.x, ratio), UV.y)) < circle_size * (1.0 - progress)) {
				COLOR.a = 0f;
			}
		}
		//Tipo Circulo no Centro
		else if (type == 2) {
			float ratio = screen_width / screen_height;
			if (distance(center, vec2(mix(center.x, UV.x, ratio), UV.y)) < circle_size * (1.0 - progress)) {
				COLOR.a = 0f;
			}
		}
		//Tipo Corte Vertical
		else if (type == 3) {
			if (distance(vec2(0.5, 0.5), vec2(UV.x, UV.x)) < curtains * (1.0 - progress)) {
				COLOR.a = 0f;
			}
		}
		//Tipo Corte Horizontal
		else if (type == 4) {
			if (distance(vec2(0.5, 0.5), vec2(UV.y, UV.y)) < curtains * (1.0 - progress)) {
				COLOR.a = 0f;
			}
		}
	}"

[sub_resource type="ShaderMaterial" id=1]
shader = SubResource( 2 )

[sub_resource type="Animation" id=4]
length = 1.5
tracks/0/type = "value"
tracks/0/path = NodePath("..:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1.4 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ true, false ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("TextureRect:modulate")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 1.4 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 0, 0, 0, 1 ) ]
}

[sub_resource type="Animation" id=3]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("TextureRect:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ true ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("..:visible")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ true ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("TextureRect:modulate")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ) ]
}

[node name="CanvasLayer" type="CanvasLayer"]

[node name="ColorRect" type="ColorRect" parent="."]
material = SubResource( 1 )
anchor_right = 1.0
anchor_bottom = 1.0

[node name="TextureRect" type="TextureRect" parent="ColorRect"]
anchor_right = 1.001
anchor_bottom = 1.001
margin_right = 0.361944
margin_bottom = 0.0769572
texture = ExtResource( 2 )
expand = true

[node name="AnimationPlayer" type="AnimationPlayer" parent="ColorRect"]
autoplay = "Carregar_fase"
anims/Carregar_fase = SubResource( 4 )
anims/RESET = SubResource( 3 )
